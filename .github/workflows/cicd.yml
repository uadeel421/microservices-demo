name: microservices-demo CI/CD Pipeline

on:
  push:
    branches:
      - featurechanges
  pull_request:
    branches: [featurechanges]
    paths:
      - 'src/**'  
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      env:
        DOTNET_INSTALL_DIR: "./.dotnet"
      with:
        dotnet-version: '9.0'
    - uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    - name: Go Unit Tests
      timeout-minutes: 10
      run: |
        for GO_PACKAGE in "shippingservice" "productcatalogservice" "frontend/validator"; do
          echo "Testing $GO_PACKAGE..."
          pushd src/$GO_PACKAGE
          go test
          popd
        done
    - name: C# Unit Tests
      timeout-minutes: 10
      run: |
        dotnet test src/cartservice/

  build-and-push:
    name: Build and Push Docker Images
    needs: code-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - frontend
          - paymentservice
          - productcatalogservice
          - recommendationservice
          - shippingservice

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create SSL certificate file
        working-directory: src/${{ matrix.service }}
        run: |
          mkdir -p ssl
          echo "${{ secrets.MYSQL_SSL_CERT }}" | base64 --decode > ssl/DigiCertGlobalRootCA.crt.pem
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version info
        id: version
        run: |
          echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build and Push Docker image
        working-directory: src/${{ matrix.service }}
        run: |
          DOCKERFILE_PATH="Dockerfile"
          if [ "${{ matrix.service }}" == "cartservice" ]; then
            DOCKERFILE_PATH="src/Dockerfile"
          fi

          docker buildx create --use --driver docker-container --bootstrap || true
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file "${DOCKERFILE_PATH}" \
            --tag uadeel421/reliance-${{ matrix.service }}:latest \
            --tag uadeel421/reliance-${{ matrix.service }}:${{ env.SHA }} \
            --push .

  helm-deploy:
    name: Deploy to AKS via Helm
    needs: build-and-push
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
  
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
  
      - name: Set up Helm
        uses: azure/setup-helm@v3
  
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
  
      - name: Create 'staging' namespace if not exists
        run: |
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
      - name: Install Secrets Store CSI Driver and Azure Provider
        run: |
          # Add the repository for the core Secrets Store CSI Driver
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
          helm repo update
          helm upgrade --install csi-secrets-store-driver secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --set "providers.azure.enabled=true"
  
      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace
  
      - name: Deploy using Helm
        run: |
          helm upgrade --install relianceapp ./helm-charts/reliance-app \
            --namespace staging \
            --values ./helm-charts/reliance-app/values-staging.yaml
