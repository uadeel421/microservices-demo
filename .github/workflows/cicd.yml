name: microservices-demo CI/CD Pipeline

on:
  push:
    branches:
      - featurechanges
  pull_request:
    branches: [featurechanges]
    paths:
      - 'src/**'  
  workflow_dispatch:

jobs:
  ci:
    name: Linting and Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - frontend
          - paymentservice
          - productcatalogservice
          - recommendationservice
          - shippingservice

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: contains(fromJson('["adservice", "emailservice", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]'), matrix.service)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Go
        if: matrix.service == 'checkoutservice'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        if: contains(fromJson('["currencyservice", "frontend"]'), matrix.service)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up .NET
        if: matrix.service == 'cartservice'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install Python dependencies
        if: contains(fromJson('["adservice", "emailservice", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]'), matrix.service)
        working-directory: src/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8 pytest-cov autopep8 requests

      - name: Install Go dependencies
        if: matrix.service == 'checkoutservice'
        working-directory: src/${{ matrix.service }}
        run: |
          go mod download

      - name: Install Node.js dependencies
        if: contains(fromJson('["currencyservice", "frontend"]'), matrix.service)
        working-directory: src/${{ matrix.service }}
        run: |
          npm ci

      - name: Install .NET dependencies
        if: matrix.service == 'cartservice'
        working-directory: src/${{ matrix.service }}/src
        run: |
          dotnet restore

      - name: Auto format Python code
        if: contains(fromJson('["adservice", "emailservice", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]'), matrix.service)
        working-directory: src/${{ matrix.service }}
        run: |
          find . -name "*.py" -exec autopep8 --in-place --aggressive {} \;

      - name: Run Python tests with coverage
        if: contains(fromJson('["adservice", "emailservice", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]'), matrix.service)
        working-directory: src/${{ matrix.service }}
        run: |
          export PYTHONPATH=.
          pytest --cov=. --cov-report=xml || exit 1

      - name: Run Go tests
        if: matrix.service == 'checkoutservice'
        working-directory: src/${{ matrix.service }}
        run: |
          go test -v ./...

      - name: Run Node.js tests
        if: contains(fromJson('["currencyservice", "frontend"]'), matrix.service)
        working-directory: src/${{ matrix.service }}
        run: |
          npm test || echo "No tests specified, skipping..."

      - name: Run .NET tests
        if: matrix.service == 'cartservice'
        working-directory: src/${{ matrix.service }}/tests
        run: |
          dotnet test

      - name: Upload coverage
        if: contains(fromJson('["adservice", "emailservice", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]'), matrix.service)
        uses: codecov/codecov-action@v3

  build-and-push:
    name: Build and Push Docker Images
    needs: ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - frontend
          - paymentservice
          - productcatalogservice
          - recommendationservice
          - shippingservice

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version info
        id: version
        run: |
          echo "SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build and Push Docker image
        working-directory: src/${{ matrix.service }}
        run: |
          docker buildx create --use --driver docker-container --bootstrap || true
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag uadeel421/reliance-${{ matrix.service }}:latest \
            --tag uadeel421/reliance-${{ matrix.service }}:${{ env.SHA }} \
            --push .

  helm-deploy:
    name: Deploy to AKS via Helm
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create 'staging' namespace if not exists
        run: |
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy using Helm
        run: |
          helm upgrade --install relianceapp ./helm-charts/reliance-app \
            --namespace staging \
            --values ./helm-charts/reliance-app/values-staging.yaml
